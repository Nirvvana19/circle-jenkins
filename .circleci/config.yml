version: 2.1

executors:
  node-executor:
    docker:
      - image: node:18-alpine  # Usamos Node.js 18 como base
    working_directory: ~/app

jobs:
  build:
    executor: node-executor
    steps:
      - checkout  # Descargar el c칩digo fuente
      
      # Instalar dependencias de Node.js
      - run:
          name: Install Node.js Dependencies
          command: |
            npm install

      # Correr pruebas (si tienes pruebas configuradas en el package.json)
      - run:
          name: Run Tests
          command: |
            npm test || echo "No tests found"

      # Configurar Docker en CircleCI (habilitar Docker en jobs)
      - setup_remote_docker: {}  # CircleCI utilizar치 la versi칩n predeterminada de Docker

  
      # Loguearse en Docker Hub usando las credenciales en las variables de entorno
      - run:
          name: Docker Login
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin


      # Construir la imagen Docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t nirvana03/mafe-prod:latest .


      # Subir la imagen Docker a Docker Hub
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            docker push nirvana03/mafe-prod:latest

  deploy:
    executor: node-executor
    steps:
      - checkout  # Descargar el c칩digo fuente

      # Preparar el despliegue con Jenkins (o Minikube para pruebas locales si es necesario)
      - run:
          name: Notify Jenkins or Trigger Deployment
          command: |
            echo "Deployment will be handled by Jenkins. Ensure Jenkins has access to Docker Hub."

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
