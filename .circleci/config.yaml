version: 2.1

# Definimos un ejecutor con Docker que usar치 una imagen Node.js
executors:
  node-executor:
    docker:
      - image: circleci/node:18-alpine  # Usamos Node.js 18
    working_directory: ~/repo  # Directorio de trabajo dentro del contenedor

# Jobs: Definimos las tareas que CircleCI ejecutar치
jobs:
  # Etapa 1: Instalar dependencias
  install_dependencies:
    executor: node-executor
    steps:
      - checkout  # Obtiene el c칩digo de tu repositorio
      - run:
          name: Instalar dependencias
          command: npm install  # Instala las dependencias de tu proyecto
      - save_cache:  # Cachea las dependencias para acelerar los futuros builds
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

  # Etapa 2: Ejecutar pruebas (si tienes pruebas implementadas)
  run_tests:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Ejecutar pruebas
          command: npm test  # Asume que tienes un script de test en package.json
          
  # Etapa 3: Desplegar en Kubernetes
  deploy_to_kubernetes:
    docker:
      - image: circleci/kubernetes:latest  # Usa un entorno con kubectl
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Instalar kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Desplegar en Kubernetes
          command: |
            kubectl apply -f ./k8s/namespace.yaml  # Crea el namespace
            kubectl apply -f ./k8s/deployment.yaml  # Despliega tu app
            kubectl apply -f ./k8s/service.yaml  # Crea el servicio
            kubectl apply -f ./k8s/ingress.yaml  # Configura el Ingress con Traefik y TLS
            kubectl rollout status deployment/mafe-deployment-prod -n mafe-production  # Asegura que el despliegue fue exitoso
      - run:
          name: Verificar Ingress
          command: kubectl get ingress -n mafe-production  # Verifica el Ingress
      - run:
          name: Verificar estado del pod
          command: kubectl get pods -n mafe-production  # Verifica que el pod est치 corriendo correctamente

# Workflow: Define el orden en que se ejecutan los jobs
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_dependencies
      - run_tests:
          requires:
            - install_dependencies
      - deploy_to_kubernetes:
          requires:
            - run_tests
